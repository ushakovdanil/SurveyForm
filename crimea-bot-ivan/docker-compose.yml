version: "3.9"
services:
  web_api:
    image: ${CI_REGISTRY_IMAGE}/${APP_IMAGE_NAME}:${CI_COMMIT_TAG}.${CI_PIPELINE_ID}
    container_name: app
    restart: always
    ports:
      - "8043:80"
    environment:
      DB_HOST: ${APP_DB_HOST_NAME}
      DB_USER: ${DB_BOT_APP_USER}
      DB_PASSWORD: ${DB_BOT_APP_PASSWORD}
      DB_NAME: ${BOT_APP_DB_NAME}
      TG_KEY: ${TG_KEY}
      ConnectionStrings__BotContext: "Port=5432; Host=${APP_DB_HOST_NAME}; Database=${BOT_APP_DB_NAME}; Username=${DB_BOT_APP_USER}; Password=${DB_BOT_APP_PASSWORD};"
      Bot__token: ${TG_KEY}
      ASPNETCORE_ENVIRONMENT: "Production"
    depends_on:
      - db
    networks:
      - bot-app
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_BOT_APP_USER}
      POSTGRES_PASSWORD: ${DB_BOT_APP_PASSWORD}
      POSTGRES_DB: ${BOT_APP_DB_NAME}
    user: 1000:1000
    ports:
      - '5432:5432'
    volumes: 
      - /home/ori/postgress:/var/lib/postgresql/data
#    volumes: 
#      - pgdata:/var/lib/postgresql/data
    networks:
      - bot-app
  adminer:
    image: adminer
    container_name: bot-adminer
    restart: always
    ports:
      - 11488:8080
    depends_on:
      - web_api
    networks:
      - bot-app
  cron:
    image: ${CI_REGISTRY_IMAGE}/${CRON_IMAGE_NAME}:${CI_COMMIT_TAG}.${CI_PIPELINE_ID}
    environment:
      APP_DB_HOST_NAME: ${APP_DB_HOST_NAME}
      DB_BOT_APP_USER: ${DB_BOT_APP_USER}
      DB_BOT_APP_PASSWORD: ${DB_BOT_APP_PASSWORD}
      BOT_APP_DB_NAME: ${BOT_APP_DB_NAME}
      TG_KEY: ${TG_KEY}
      TG_GROUP_ID: ${TG_GROUP_ID}
    container_name: bot-cron
    restart: always
    depends_on:
      - web_api
    networks:
      - bot-app

networks:
  bot-app:
    driver: bridge
    name: bot-network
