// <auto-generated />
using System;
using System.Collections.Generic;
using Api.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231108223231_initial-create")]
    partial class initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.Entities.BotMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BotThemeEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("FilesUrls")
                        .HasColumnType("text[]");

                    b.Property<string>("KeyboardType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BotThemeEntityId");

                    b.ToTable("BotMessages");
                });

            modelBuilder.Entity("Api.Models.Entities.BotThemeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentThemeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentThemeId");

                    b.ToTable("BotThemes");
                });

            modelBuilder.Entity("Api.Models.Entities.InlineKeyboardButtonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BotMessageEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CallbackData")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<Guid>("TextId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BotMessageEntityId");

                    b.ToTable("InlineKeyboardButtons");
                });

            modelBuilder.Entity("Api.Models.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Api.Models.Entities.LocalizebleResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BotMessageEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BotMessageEntityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizebleResources");
                });

            modelBuilder.Entity("Api.Models.Entities.ReplyKeyboardButtonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BotMessageEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<Guid>("TextId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BotMessageEntityId");

                    b.ToTable("ReplyKeyboardButtons");
                });

            modelBuilder.Entity("Api.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LastThemeId")
                        .HasColumnType("uuid");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LastThemeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Api.Models.Entities.BotMessageEntity", b =>
                {
                    b.HasOne("Api.Models.Entities.BotThemeEntity", null)
                        .WithMany("BotMessages")
                        .HasForeignKey("BotThemeEntityId");
                });

            modelBuilder.Entity("Api.Models.Entities.BotThemeEntity", b =>
                {
                    b.HasOne("Api.Models.Entities.BotThemeEntity", "ParentTheme")
                        .WithMany()
                        .HasForeignKey("ParentThemeId");

                    b.Navigation("ParentTheme");
                });

            modelBuilder.Entity("Api.Models.Entities.InlineKeyboardButtonEntity", b =>
                {
                    b.HasOne("Api.Models.Entities.BotMessageEntity", null)
                        .WithMany("InlineKeyboardMarkup")
                        .HasForeignKey("BotMessageEntityId");
                });

            modelBuilder.Entity("Api.Models.Entities.LocalizebleResource", b =>
                {
                    b.HasOne("Api.Models.Entities.BotMessageEntity", null)
                        .WithMany("LocalizedTexts")
                        .HasForeignKey("BotMessageEntityId");

                    b.HasOne("Api.Models.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Api.Models.Entities.ReplyKeyboardButtonEntity", b =>
                {
                    b.HasOne("Api.Models.Entities.BotMessageEntity", null)
                        .WithMany("ReplyKeyboardMarkup")
                        .HasForeignKey("BotMessageEntityId");
                });

            modelBuilder.Entity("Api.Models.Entities.UserEntity", b =>
                {
                    b.HasOne("Api.Models.Entities.BotThemeEntity", "LastTheme")
                        .WithMany()
                        .HasForeignKey("LastThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastTheme");
                });

            modelBuilder.Entity("Api.Models.Entities.BotMessageEntity", b =>
                {
                    b.Navigation("InlineKeyboardMarkup");

                    b.Navigation("LocalizedTexts");

                    b.Navigation("ReplyKeyboardMarkup");
                });

            modelBuilder.Entity("Api.Models.Entities.BotThemeEntity", b =>
                {
                    b.Navigation("BotMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
